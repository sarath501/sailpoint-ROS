import java.util.Date;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.List;
import sailpoint.api.SailPointContext;
import sailpoint.connector.JDBCConnector;
import sailpoint.object.Application;
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.ProvisioningPlan.PermissionRequest;
import sailpoint.object.ProvisioningResult;
import sailpoint.object.Schema;
import sailpoint.tools.xml.XMLObjectFactory;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import sailpoint.tools.Util;
//import java.util.UUID;
ProvisioningResult result = new ProvisioningResult();
  // UUID uuid = UUID.randomUUID();


public Object getAttributeRequestValue(AccountRequest acctReq, String attribute) {
	    	if ( acctReq != null ) {
	    	  AttributeRequest attrReq = acctReq.getAttributeRequest(attribute);
	    	  if ( attrReq != null ) {
	    	    return attrReq.getValue();
	    	  }
	    	}
	    	return null;
	    }

if ( plan != null ) {

	System.out.println("* \n The Provisioning Plan being passed in = \n*\n" + plan.toXml() + "\n**");

	List accounts = plan.getAccountRequests();
	
	// 
	//  Get all Account Requests out of the plan
	// 

	if ( ( accounts != null ) && ( accounts.size() > 0 ) ) {
	
		//
		// If the plan contains one or more account requests, we'll iterate through them
		//
		
		for ( AccountRequest account : accounts ) {
			
			try {


					
						System.out.println("Account Request Operation = Create");

PreparedStatement statement = connection.prepareStatement("insert into users (employee_Id,NID,displayName,firstName,lastName,status) values (?,?,?,?,?,?)");
					statement.setString(1, getAttributeRequestValue(account, "employeeId"));
					statement.setString(2, getAttributeRequestValue(account, "NID"));
					statement.setString(3, getAttributeRequestValue(account, "displayName"));
					statement.setString(4, getAttributeRequestValue(account, "firstname"));
					statement.setString(5, getAttributeRequestValue(account, "lastname"));
                                        statement.setBoolean(6, getAttributeRequestValue(account, "status"));
					//statement.setString(4, "A"));
					//statement.setString(6, getAttributeRequestValue(account, "locked"));
                                        //statement.setString(7, getAttributeRequestValue(account, "password"));
					 //
					 // Grab the role from the request. If it's a single role, it'll be a string, add it to 
					 // the statement, other wise if it's a List, convert to CSV and add it to the statement
					 //
					// AttributeRequest attrReq = account.getAttributeRequest("groups");
					// if (attrReq != null) {
								//if (attrReq.getValue() instanceof String) {
								//	statement.setString(4, (String) attrReq.getValue());
								//} else if (attrReq.getValue() instanceof List) {
								//	String listOfRoles = Util.listToCsv((List) //attrReq.getValue());
								//	statement.setString(4, listOfRoles);
								//}
					// } else {
                                                      //         statement.setString(4,"");
                                      //   }

					System.out.println("Preparing to execute: " + statement);
					statement.executeUpdate();
						
					//
					// Sucessful Create, so mark result as COMMITTED
					//
					
					result.setStatus(ProvisioningResult.STATUS_COMMITTED);
					
				}
				catch (SQLException e) {
                        System.out.println("Error: " + e);
                        result.setStatus(ProvisioningResult.STATUS_FAILED);
                        result.addError(e);
			} 
			}
		}
}
System.out.println("**");
System.out.println("**");
System.out.println("Exiting Provisioning Rule for PRISM. \n  Result=  \n" + result.toXml(false));
System.out.println("**");
System.out.println("**");
System.out.println("\n\n\n\n\n");
return result;